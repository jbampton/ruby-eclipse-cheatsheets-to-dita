<?xml version="1.0"?>
<output/>
  <compositeCheatsheet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../compositeContentFile.xsd" name="Semi Automated Track Construction">
   <taskGroup kind="sequence" name="Walkthrough" skip="false">
      <intro>
         <b>Introduction</b><br/>
This collection of cheat sheets will teach you how to use Debrief's Semi Automated Track Construction (SATC) capabilities.
         <br/><br/><b>Tip:</b>  If you have multiple monitors, you may wish to drag out this <b>Cheat Sheets</b> window to give 
         you more room for the multiple Debrief windows that you will use later on. 
      </intro>
      <onCompletion>
         <b>Conclusion</b>
      </onCompletion>
      <task kind="cheatsheet" name="Concepts" skip="false">
         <intro>
            <b>Background</b><br/>
Before we get started with loading and manipulating data, we're going to learn some of the background terms and concepts.
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
            Ok, that's the boring school work out of the way. The rest of this cheat-sheet is all conducted here in Debrief.
         </onCompletion>
         <param name="path" value="overall_intro.xml"/>
         
      </task>
      <taskGroup kind="sequence" name="Single Leg Solution" skip="false">
         <intro>
            <b>Introduction</b>
Let's start off with an easy scenario. We're going to work on an engagement where there is just a single leg of target data.
         </intro>
         <onCompletion>
            And that's the end of the tutorial for single-leg target track construction.
         </onCompletion>
         <task kind="cheatsheet" name="Generating a project" skip="true">
            <intro>
               To be able to save your tutorial data, you need a Debrief <b>Workspace</b> to store your data in.  
               But, if you have a Debrief <b>Navigator</b> window open, and in it you can see one or more folders in it, you can skip this step.
            </intro>
            <onCompletion>
               <b>Conclusion</b><br/>
You now have a Debrief <b>Project</b>, to contain your tutorial data.
            </onCompletion>
            <param name="path" value="../GettingStarted/GenerateProject.xml"/>
            
         </task>
         <taskGroup kind="choice" name="Finding the sample data">
            <intro>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </intro>
            <task kind="cheatsheet" name="Sample data from a local folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
            <task kind="cheatsheet" name="Sample data from a shared folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
            </task>
            
         </taskGroup>
         <task kind="cheatsheet" name="Loading the data" skip="false">
            <intro>
               Let's get some sample data loaded.
            </intro>
            <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of ownship bearing data.
            </onCompletion>
            <param name="path" value="single_load.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Creating the scenario" skip="false">
            <intro>
               Now that data is present, it's time to create a scenario based upon it.
            </intro>
            <onCompletion>
               We've provided the TMA algortihm with some data, let's see it calculate a solution
            </onCompletion>
            <param name="path" value="single_create.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Getting a solution" skip="false">
            <intro>
               Now for the interesting bit. Let's see SATC generate a solution.
            </intro>
            <onCompletion>
               We now have a target solution, very close to the truth track, generated by SATC.
            </onCompletion>
            <param name="path" value="single_solution.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Importing as a TMA track" skip="false">
            <intro>
               Lastly we're going to import the solution into Debrief as a normal TMA track, for subsequent analysis/exploitation.
            </intro>
            <onCompletion>
               <b>That's it for single leg solutions.</b>  Now close the Debrief plot containing the single-leg solution, 
                  (no need to save). Next we'll work on a multi-leg solution.
            </onCompletion>
            <param name="path" value="single_import.xml"/>
            
         </task>
      </taskGroup>
      <taskGroup kind="sequence" name="Multi Leg Solution" skip="false">
         <intro>
            Now for something a little more advanced. In this tutorial we're going to work with a scenario with several targets zigs, where a number of contributions are required to get a good quality solution.
         </intro>
         <task kind="cheatsheet" name="Loading the data file" skip="false">
            <intro>
               Once again, we will start off by loading some data.
            </intro>
            <param name="path" value="multi_load.xml"/>            
         </task>
         <task kind="cheatsheet" name="Grooming the data" skip="false">
            <intro>
               The next step is to provide some analyst contributions.
            </intro>
            <param name="path" value="multi_view.xml"/>
         </task>
         <task kind="cheatsheet" name="Fun with legs" skip="false">
            <intro>
               We still haven't got enough information to produce a solution, so it's time to provide some leg-related knowledge
            </intro>
            <onCompletion>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </onCompletion>
            <param name="path" value="multi_legs.xml"/>
         </task>
      </taskGroup>
   </taskGroup>
</compositeCheatsheet>
  <taskGroup kind="sequence" name="Walkthrough" skip="false">
      <intro>
         <b>Introduction</b><br/>
This collection of cheat sheets will teach you how to use Debrief's Semi Automated Track Construction (SATC) capabilities.
         <br/><br/><b>Tip:</b>  If you have multiple monitors, you may wish to drag out this <b>Cheat Sheets</b> window to give 
         you more room for the multiple Debrief windows that you will use later on. 
      </intro>
      <onCompletion>
         <b>Conclusion</b>
      </onCompletion>
      <task kind="cheatsheet" name="Concepts" skip="false">
         <intro>
            <b>Background</b><br/>
Before we get started with loading and manipulating data, we're going to learn some of the background terms and concepts.
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
            Ok, that's the boring school work out of the way. The rest of this cheat-sheet is all conducted here in Debrief.
         </onCompletion>
         <param name="path" value="overall_intro.xml"/>
         
      </task>
      <taskGroup kind="sequence" name="Single Leg Solution" skip="false">
         <intro>
            <b>Introduction</b>
Let's start off with an easy scenario. We're going to work on an engagement where there is just a single leg of target data.
         </intro>
         <onCompletion>
            And that's the end of the tutorial for single-leg target track construction.
         </onCompletion>
         <task kind="cheatsheet" name="Generating a project" skip="true">
            <intro>
               To be able to save your tutorial data, you need a Debrief <b>Workspace</b> to store your data in.  
               But, if you have a Debrief <b>Navigator</b> window open, and in it you can see one or more folders in it, you can skip this step.
            </intro>
            <onCompletion>
               <b>Conclusion</b><br/>
You now have a Debrief <b>Project</b>, to contain your tutorial data.
            </onCompletion>
            <param name="path" value="../GettingStarted/GenerateProject.xml"/>
            
         </task>
         <taskGroup kind="choice" name="Finding the sample data">
            <intro>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </intro>
            <task kind="cheatsheet" name="Sample data from a local folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
            <task kind="cheatsheet" name="Sample data from a shared folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
            </task>
            
         </taskGroup>
         <task kind="cheatsheet" name="Loading the data" skip="false">
            <intro>
               Let's get some sample data loaded.
            </intro>
            <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of ownship bearing data.
            </onCompletion>
            <param name="path" value="single_load.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Creating the scenario" skip="false">
            <intro>
               Now that data is present, it's time to create a scenario based upon it.
            </intro>
            <onCompletion>
               We've provided the TMA algortihm with some data, let's see it calculate a solution
            </onCompletion>
            <param name="path" value="single_create.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Getting a solution" skip="false">
            <intro>
               Now for the interesting bit. Let's see SATC generate a solution.
            </intro>
            <onCompletion>
               We now have a target solution, very close to the truth track, generated by SATC.
            </onCompletion>
            <param name="path" value="single_solution.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Importing as a TMA track" skip="false">
            <intro>
               Lastly we're going to import the solution into Debrief as a normal TMA track, for subsequent analysis/exploitation.
            </intro>
            <onCompletion>
               <b>That's it for single leg solutions.</b>  Now close the Debrief plot containing the single-leg solution, 
                  (no need to save). Next we'll work on a multi-leg solution.
            </onCompletion>
            <param name="path" value="single_import.xml"/>
            
         </task>
      </taskGroup>
      <taskGroup kind="sequence" name="Multi Leg Solution" skip="false">
         <intro>
            Now for something a little more advanced. In this tutorial we're going to work with a scenario with several targets zigs, where a number of contributions are required to get a good quality solution.
         </intro>
         <task kind="cheatsheet" name="Loading the data file" skip="false">
            <intro>
               Once again, we will start off by loading some data.
            </intro>
            <param name="path" value="multi_load.xml"/>            
         </task>
         <task kind="cheatsheet" name="Grooming the data" skip="false">
            <intro>
               The next step is to provide some analyst contributions.
            </intro>
            <param name="path" value="multi_view.xml"/>
         </task>
         <task kind="cheatsheet" name="Fun with legs" skip="false">
            <intro>
               We still haven't got enough information to produce a solution, so it's time to provide some leg-related knowledge
            </intro>
            <onCompletion>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </onCompletion>
            <param name="path" value="multi_legs.xml"/>
         </task>
      </taskGroup>
   </taskGroup>
  <intro>
         <b>Introduction</b><br/>
This collection of cheat sheets will teach you how to use Debrief's Semi Automated Track Construction (SATC) capabilities.
         <br/><br/><b>Tip:</b>  If you have multiple monitors, you may wish to drag out this <b>Cheat Sheets</b> window to give 
         you more room for the multiple Debrief windows that you will use later on. 
      </intro>
  <b>Introduction</b>
  <br/>
  <br/>
  <br/>
  <b>Tip:</b>
  <b>Cheat Sheets</b>
  <onCompletion>
         <b>Conclusion</b>
      </onCompletion>
  <b>Conclusion</b>
  <task kind="cheatsheet" name="Concepts" skip="false">
         <intro>
            <b>Background</b><br/>
Before we get started with loading and manipulating data, we're going to learn some of the background terms and concepts.
         </intro>
         <onCompletion>
            <b>Conclusion</b><br/>
            Ok, that's the boring school work out of the way. The rest of this cheat-sheet is all conducted here in Debrief.
         </onCompletion>
         <param name="path" value="overall_intro.xml"/>
         
      </task>
  <intro>
            <b>Background</b><br/>
Before we get started with loading and manipulating data, we're going to learn some of the background terms and concepts.
         </intro>
  <b>Background</b>
  <br/>
  <onCompletion>
            <b>Conclusion</b><br/>
            Ok, that's the boring school work out of the way. The rest of this cheat-sheet is all conducted here in Debrief.
         </onCompletion>
  <b>Conclusion</b>
  <br/>
  <param name="path" value="overall_intro.xml"/>
  <taskGroup kind="sequence" name="Single Leg Solution" skip="false">
         <intro>
            <b>Introduction</b>
Let's start off with an easy scenario. We're going to work on an engagement where there is just a single leg of target data.
         </intro>
         <onCompletion>
            And that's the end of the tutorial for single-leg target track construction.
         </onCompletion>
         <task kind="cheatsheet" name="Generating a project" skip="true">
            <intro>
               To be able to save your tutorial data, you need a Debrief <b>Workspace</b> to store your data in.  
               But, if you have a Debrief <b>Navigator</b> window open, and in it you can see one or more folders in it, you can skip this step.
            </intro>
            <onCompletion>
               <b>Conclusion</b><br/>
You now have a Debrief <b>Project</b>, to contain your tutorial data.
            </onCompletion>
            <param name="path" value="../GettingStarted/GenerateProject.xml"/>
            
         </task>
         <taskGroup kind="choice" name="Finding the sample data">
            <intro>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </intro>
            <task kind="cheatsheet" name="Sample data from a local folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
            <task kind="cheatsheet" name="Sample data from a shared folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
            </task>
            
         </taskGroup>
         <task kind="cheatsheet" name="Loading the data" skip="false">
            <intro>
               Let's get some sample data loaded.
            </intro>
            <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of ownship bearing data.
            </onCompletion>
            <param name="path" value="single_load.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Creating the scenario" skip="false">
            <intro>
               Now that data is present, it's time to create a scenario based upon it.
            </intro>
            <onCompletion>
               We've provided the TMA algortihm with some data, let's see it calculate a solution
            </onCompletion>
            <param name="path" value="single_create.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Getting a solution" skip="false">
            <intro>
               Now for the interesting bit. Let's see SATC generate a solution.
            </intro>
            <onCompletion>
               We now have a target solution, very close to the truth track, generated by SATC.
            </onCompletion>
            <param name="path" value="single_solution.xml"/>
            
         </task>
         <task kind="cheatsheet" name="Importing as a TMA track" skip="false">
            <intro>
               Lastly we're going to import the solution into Debrief as a normal TMA track, for subsequent analysis/exploitation.
            </intro>
            <onCompletion>
               <b>That's it for single leg solutions.</b>  Now close the Debrief plot containing the single-leg solution, 
                  (no need to save). Next we'll work on a multi-leg solution.
            </onCompletion>
            <param name="path" value="single_import.xml"/>
            
         </task>
      </taskGroup>
  <intro>
            <b>Introduction</b>
Let's start off with an easy scenario. We're going to work on an engagement where there is just a single leg of target data.
         </intro>
  <b>Introduction</b>
  <onCompletion>
            And that's the end of the tutorial for single-leg target track construction.
         </onCompletion>
  <task kind="cheatsheet" name="Generating a project" skip="true">
            <intro>
               To be able to save your tutorial data, you need a Debrief <b>Workspace</b> to store your data in.  
               But, if you have a Debrief <b>Navigator</b> window open, and in it you can see one or more folders in it, you can skip this step.
            </intro>
            <onCompletion>
               <b>Conclusion</b><br/>
You now have a Debrief <b>Project</b>, to contain your tutorial data.
            </onCompletion>
            <param name="path" value="../GettingStarted/GenerateProject.xml"/>
            
         </task>
  <intro>
               To be able to save your tutorial data, you need a Debrief <b>Workspace</b> to store your data in.  
               But, if you have a Debrief <b>Navigator</b> window open, and in it you can see one or more folders in it, you can skip this step.
            </intro>
  <b>Workspace</b>
  <b>Navigator</b>
  <onCompletion>
               <b>Conclusion</b><br/>
You now have a Debrief <b>Project</b>, to contain your tutorial data.
            </onCompletion>
  <b>Conclusion</b>
  <br/>
  <b>Project</b>
  <param name="path" value="../GettingStarted/GenerateProject.xml"/>
  <taskGroup kind="choice" name="Finding the sample data">
            <intro>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </intro>
            <task kind="cheatsheet" name="Sample data from a local folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
            <task kind="cheatsheet" name="Sample data from a shared folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
            </task>
            
         </taskGroup>
  <intro>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </intro>
  <b>master</b>
  <task kind="cheatsheet" name="Sample data from a local folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
  <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled <b>Sample Data</b>, 
                  that contains a folder called <b>SATC</b>. If there is one there, you can skip this step.
               </intro>
  <b>sample data</b>
  <b>Navigator</b>
  <b>Sample Data</b>
  <b>SATC</b>
  <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
  <b>Conclusion</b>
  <br/>
  <b>Sample Data</b>
  <param name="path" value="../GettingStarted/FindingYourData.xml"/>
  <task kind="cheatsheet" name="Sample data from a shared folder" skip="true">
               <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
               <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
            </task>
  <intro>
                  You should have a Debrief project open. You will also need a link to the Debrief <b>sample data</b>.  
                  So, open up the projects in your <b>Navigator</b> window, and see if there is a folder titled
                  <b>Sample Data</b>, that contains a folder called <b>SATC</b>. 
                  <br/><br/>If there is one there, you can skip this step,
                  otherwise click on <b>Start working on this task</b>.
               </intro>
  <b>sample data</b>
  <b>Navigator</b>
  <b>Sample Data</b>
  <b>SATC</b>
  <br/>
  <br/>
  <b>Start working on this task</b>
  <onCompletion>
                  <b>Conclusion</b><br/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </onCompletion>
  <b>Conclusion</b>
  <br/>
  <b>Sample Data</b>
  <param name="path" value="../GettingStarted/FindingYourNetworkData.xml"/>
  <task kind="cheatsheet" name="Loading the data" skip="false">
            <intro>
               Let's get some sample data loaded.
            </intro>
            <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of ownship bearing data.
            </onCompletion>
            <param name="path" value="single_load.xml"/>
            
         </task>
  <intro>
               Let's get some sample data loaded.
            </intro>
  <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of ownship bearing data.
            </onCompletion>
  <param name="path" value="single_load.xml"/>
  <task kind="cheatsheet" name="Creating the scenario" skip="false">
            <intro>
               Now that data is present, it's time to create a scenario based upon it.
            </intro>
            <onCompletion>
               We've provided the TMA algortihm with some data, let's see it calculate a solution
            </onCompletion>
            <param name="path" value="single_create.xml"/>
            
         </task>
  <intro>
               Now that data is present, it's time to create a scenario based upon it.
            </intro>
  <onCompletion>
               We've provided the TMA algortihm with some data, let's see it calculate a solution
            </onCompletion>
  <param name="path" value="single_create.xml"/>
  <task kind="cheatsheet" name="Getting a solution" skip="false">
            <intro>
               Now for the interesting bit. Let's see SATC generate a solution.
            </intro>
            <onCompletion>
               We now have a target solution, very close to the truth track, generated by SATC.
            </onCompletion>
            <param name="path" value="single_solution.xml"/>
            
         </task>
  <intro>
               Now for the interesting bit. Let's see SATC generate a solution.
            </intro>
  <onCompletion>
               We now have a target solution, very close to the truth track, generated by SATC.
            </onCompletion>
  <param name="path" value="single_solution.xml"/>
  <task kind="cheatsheet" name="Importing as a TMA track" skip="false">
            <intro>
               Lastly we're going to import the solution into Debrief as a normal TMA track, for subsequent analysis/exploitation.
            </intro>
            <onCompletion>
               <b>That's it for single leg solutions.</b>  Now close the Debrief plot containing the single-leg solution, 
                  (no need to save). Next we'll work on a multi-leg solution.
            </onCompletion>
            <param name="path" value="single_import.xml"/>
            
         </task>
  <intro>
               Lastly we're going to import the solution into Debrief as a normal TMA track, for subsequent analysis/exploitation.
            </intro>
  <onCompletion>
               <b>That's it for single leg solutions.</b>  Now close the Debrief plot containing the single-leg solution, 
                  (no need to save). Next we'll work on a multi-leg solution.
            </onCompletion>
  <b>That's it for single leg solutions.</b>
  <param name="path" value="single_import.xml"/>
  <taskGroup kind="sequence" name="Multi Leg Solution" skip="false">
         <intro>
            Now for something a little more advanced. In this tutorial we're going to work with a scenario with several targets zigs, where a number of contributions are required to get a good quality solution.
         </intro>
         <task kind="cheatsheet" name="Loading the data file" skip="false">
            <intro>
               Once again, we will start off by loading some data.
            </intro>
            <param name="path" value="multi_load.xml"/>            
         </task>
         <task kind="cheatsheet" name="Grooming the data" skip="false">
            <intro>
               The next step is to provide some analyst contributions.
            </intro>
            <param name="path" value="multi_view.xml"/>
         </task>
         <task kind="cheatsheet" name="Fun with legs" skip="false">
            <intro>
               We still haven't got enough information to produce a solution, so it's time to provide some leg-related knowledge
            </intro>
            <onCompletion>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </onCompletion>
            <param name="path" value="multi_legs.xml"/>
         </task>
      </taskGroup>
  <intro>
            Now for something a little more advanced. In this tutorial we're going to work with a scenario with several targets zigs, where a number of contributions are required to get a good quality solution.
         </intro>
  <task kind="cheatsheet" name="Loading the data file" skip="false">
            <intro>
               Once again, we will start off by loading some data.
            </intro>
            <param name="path" value="multi_load.xml"/>            
         </task>
  <intro>
               Once again, we will start off by loading some data.
            </intro>
  <param name="path" value="multi_load.xml"/>
  <task kind="cheatsheet" name="Grooming the data" skip="false">
            <intro>
               The next step is to provide some analyst contributions.
            </intro>
            <param name="path" value="multi_view.xml"/>
         </task>
  <intro>
               The next step is to provide some analyst contributions.
            </intro>
  <param name="path" value="multi_view.xml"/>
  <task kind="cheatsheet" name="Fun with legs" skip="false">
            <intro>
               We still haven't got enough information to produce a solution, so it's time to provide some leg-related knowledge
            </intro>
            <onCompletion>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </onCompletion>
            <param name="path" value="multi_legs.xml"/>
         </task>
  <intro>
               We still haven't got enough information to produce a solution, so it's time to provide some leg-related knowledge
            </intro>
  <onCompletion>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </onCompletion>
  <param name="path" value="multi_legs.xml"/>
</output/>
